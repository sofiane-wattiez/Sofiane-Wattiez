name: Generate GitHub Contributions Snake Animation

on:
  schedule:
    - cron: "0 0 * * *"  # Exécuter tous les jours à minuit UTC
  workflow_dispatch:  # Permet un déclenchement manuel
  push:
    branches:
      - main  # Déclenchement lors de poussées vers la branche main

jobs:
  generate:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      # Étape 1 : Checkout du dépôt
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true  # Nettoie le répertoire avant de faire le checkout

      # Étape 2 : Générer l'animation Snake
      - name: Generate GitHub Contributions Snake Animations
        uses: Platane/snk@v3.2.0
        with:
          github_user_name: ${{ github.repository_owner }}  # Nom d'utilisateur GitHub pour générer l'animation
          outputs: |
            dist/github-snake.svg
            dist/github-snake-dark.svg?palette=github-dark
            dist/ocean.gif?color_snake=orange&color_dots=#bfd6f6,#8dbdff,#64a1f4,#4b91f1,#3c7dd9
        env:
          GITHUB_TOKEN: ${{ secrets.METRICS_TOKEN }}  # Utilisation du token pour l'authentification

      # Étape 3 : Déployer dans la branche output
      - name: Deploy to Output Branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.METRICS_TOKEN }}  # Authentification pour déployer
          publish_dir: ./dist  # Répertoire contenant les fichiers générés
          publish_branch: output  # Branche où déployer
          commit_message: "Update snake animation [skip ci]"  # Message de commit

      # Étape 4 : Checkout de la branche output
      - name: Checkout Output Branch
        uses: actions/checkout@v4
        with:
          ref: output  # Checkout de la branche output

      # Étape 5 : Créer le répertoire dist/ si nécessaire
      - name: Create dist directory if it does not exist
        run: |
          mkdir -p dist  # Crée le répertoire dist s'il n'existe pas

      # Étape 6 : Copier les fichiers de output vers main
      - name: Copy files from output to main
        run: |
          # Passez à la branche main
          git checkout main

          # Vérifiez si les fichiers existent déjà avant de les copier
          if [ ! -f dist/github-snake.svg ]; then
            cp dist/github-snake.svg dist/
          else
            echo "File dist/github-snake.svg already exists, skipping copy."
          fi

          if [ ! -f dist/github-snake-dark.svg ]; then
            cp dist/github-snake-dark.svg dist/
          else
            echo "File dist/github-snake-dark.svg already exists, skipping copy."
          fi

          if [ ! -f dist/ocean.gif ]; then
            cp dist/ocean.gif dist/
          else
            echo "File dist/ocean.gif already exists, skipping copy."
          fi

          # Configurer l'utilisateur pour le commit
          git config user.name "GitHub Actions"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Ajouter et pousser les fichiers modifiés
          git add dist/github-snake.svg dist/github-snake-dark.svg dist/ocean.gif
          git commit -m "Copy snake animations from output branch"
          git push origin main  # Poussez vers main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Authentification pour pousser vers main
